- unless @errors.nil?
  .enable-lists{:style => "color:red;"}
    %strong Errors On Form
    %ul
      - if @errors[:error].instance_of? OpenStruct
        - errors = @errors[:error].to_h
        - errors.delete :links
        - errors.delete :context
        - errors.to_h.each do |errors_field, error|
          - next if error.nil?
          <style>#ontology_#{errors_field} { border: thin solid red; }</style>
          %li
            - if error.instance_of? OpenStruct
              - error_hash = error.to_h
              - error_hash.delete :links
              - error_hash.delete :context
              - error_hash.each do |error_type, e|
                = "#{error_type} : #{e}"
            - else
              = errors_field
      - else
        -# A generic fallback
        = @errors.to_json

= form_for(:review, :url => reviews_path, :remote => true, :id => "new_review_form") do |f|
  = f.hidden_field :ontologyReviewed, value: @review.ontologyReviewed
  = f.hidden_field :creator, value: @review.creator
  %fieldset
    %legend
      %b
        Review For #{@ontology.name}
    %table
      %tr
        %td
          Ratings
          %br/
          - for rating in @rating_types
            %div{:style => "padding:2px;border-top:1px solid gray;"}
              - (1..5).each do |i|
                = f.radio_button rating, i, class: "star"
              &nbsp;#{rating.to_s.chomp("Rating").capitalize}
      %tr
        %td= f.text_area :body, value: @review.body, cols: 80, rows: 5
  = submit_tag "Submit Review", class: "blueButton"

:javascript
  // Do this after the HTML above loads
  jQuery('input.star').rating();
  jQuery(document).on("ajax:success", function(e, data) {

     if(data && e.target.parentElement && data.includes("new_review_form")){
        e.target.parentElement.innerHTML = data
        jQuery('input.star').rating();
     }
  });
